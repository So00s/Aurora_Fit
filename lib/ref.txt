// lib/main.dart
import 'dart:convert';
import 'dart:io';
import 'dart:typed_data';
import 'dart:ui' as ui;
import 'package:flutter/material.dart';
import 'package:path_provider/path_provider.dart';
import 'package:http/http.dart' as http; // Пакет для HTTP запросов
import 'drawing_canvas.dart'; // Импортируем DrawingCanvas

void main() {
  runApp(const MyApp());
}

// Модель заметки
class Note {
  String title;
  String content;

  Note({required this.title, required this.content});

  // Преобразование объекта Note в Map
  Map<String, dynamic> toMap() {
    return {
      'title': title,
      'content': content,
    };
  }

  // Создание объекта Note из Map
  factory Note.fromMap(Map<String, dynamic> map) {
    return Note(
      title: map['title'],
      content: map['content'],
    );
  }
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  // Корневой виджет приложения
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Умный Блокнот',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: const HomePage(),
    );
  }
}

class HomePage extends StatefulWidget {
  const HomePage({super.key});

  // Состояние главной страницы
  @override
  State<HomePage> createState() => _HomePageState();
}

class _HomePageState extends State<HomePage> {
  List<Note> _notes = [];
  final String _fileName = 'notes.json';
  late File _file;

  @override
  void initState() {
    super.initState();
    _initializeFile();
  }

  // Инициализация файла для хранения заметок
  void _initializeFile() async {
    Directory appDocDir = await _getStorageDirectory();
    _file = File('${appDocDir.path}/$_fileName');
    if (await _file.exists()) {
      String contents = await _file.readAsString();
      if (contents.isNotEmpty) {
        List<dynamic> jsonData = jsonDecode(contents);
        setState(() {
          _notes = jsonData.map((item) => Note.fromMap(item)).toList();
        });
      }
    } else {
      await _file.create(recursive: true);
    }
  }

  // Получение директории для хранения данных с использованием path_provider
  Future<Directory> _getStorageDirectory() async {
    try {
      Directory dir = await getApplicationDocumentsDirectory();
      // Создаем поддиректорию, если необходимо
      Directory appDir = Directory('${dir.path}/SimpleNotebook');
      if (!await appDir.exists()) {
        await appDir.create(recursive: true);
      }
      return appDir;
    } catch (e) {
      print('Ошибка при определении директории: $e');
      // В случае ошибки используем текущую директорию
      return Directory.current;
    }
  }

  // Сохранение заметок в файл
  Future<void> _saveNotes() async {
    List<Map<String, dynamic>> notesMap =
        _notes.map((note) => note.toMap()).toList();
    String jsonString = jsonEncode(notesMap);
    await _file.writeAsString(jsonString);
  }

  // Добавление новой заметки
  void _addNote() async {
    Note? newNote = await Navigator.push(
      context,
      MaterialPageRoute(builder: (context) => const EditNotePage()),
    );

    if (newNote != null) {
      setState(() {
        _notes.add(newNote);
      });
      _saveNotes();
    }
  }

  // Редактирование существующей заметки
  void _editNote(int index) async {
    Note? editedNote = await Navigator.push(
      context,
      MaterialPageRoute(
          builder: (context) => EditNotePage(note: _notes[index])),
    );

    if (editedNote != null) {
      setState(() {
        _notes[index] = editedNote;
      });
      _saveNotes();
    }
  }

  // Удаление заметки
  void _deleteNote(int index) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Удалить заметку'),
        content: const Text('Вы уверены, что хотите удалить эту заметку?'),
        actions: [
          TextButton(
            onPressed: () {
              Navigator.of(context).pop(); // Закрыть диалог
            },
            child: const Text('Отмена'),
          ),
          TextButton(
            onPressed: () {
              setState(() {
                _notes.removeAt(index);
              });
              _saveNotes();
              Navigator.of(context).pop(); // Закрыть диалог
            },
            child: const Text(
              'Удалить',
              style: TextStyle(color: Colors.red),
            ),
          ),
        ],
      ),
    );
  }

  // Вспомогательная функция для получения предпросмотра текста
  String _getPreview(String content) {
    // Ищем первую новую строку
    int newlineIndex = content.indexOf('\n');
    if (newlineIndex != -1 && newlineIndex <= 60) {
      return content.substring(0, newlineIndex);
    } else if (content.length > 60) {
      return '${content.substring(0, 60)}...';
    } else {
      return content;
    }
  }

  // Построение списка заметок
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Умный Блокнот'),
      ),
      body: _notes.isEmpty
          ? const Center(
              child: Text(
                'Нет заметок. Нажмите +, чтобы добавить.',
                style: TextStyle(fontSize: 18),
              ),
            )
          : ListView.builder(
              itemCount: _notes.length,
              itemBuilder: (context, index) {
                Note note = _notes[index];
                return Padding(
                  padding:
                      const EdgeInsets.symmetric(horizontal: 8.0, vertical: 4.0),
                  child: Container(
                    decoration: BoxDecoration(
                      border: Border.all(color: Colors.grey.shade400),
                      borderRadius: BorderRadius.circular(8.0),
                      color: Colors.white,
                      boxShadow: [
                        BoxShadow(
                          color: Colors.grey.shade200,
                          blurRadius: 4.0,
                          offset: const Offset(2, 2),
                        ),
                      ],
                    ),
                    child: ListTile(
                      title: Text(
                        note.title,
                        style: const TextStyle(
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                      subtitle: Text(
                        _getPreview(note.content),
                        style: const TextStyle(color: Colors.black54),
                      ),
                      onTap: () => _editNote(index),
                      trailing: IconButton(
                        icon: const Icon(Icons.delete, color: Colors.red),
                        onPressed: () => _deleteNote(index),
                      ),
                    ),
                  ),
                );
              },
            ),
      floatingActionButton: FloatingActionButton(
        onPressed: _addNote,
        tooltip: 'Добавить заметку',
        child: const Icon(Icons.add),
      ),
      backgroundColor: Colors.grey.shade100, // Фоновый цвет приложения
    );
  }
}

class EditNotePage extends StatefulWidget {
  final Note? note;

  const EditNotePage({super.key, this.note});

  @override
  State<EditNotePage> createState() => _EditNotePageState();
}

class _EditNotePageState extends State<EditNotePage> {
  final _formKey = GlobalKey<FormState>();
  late String _title;
  late String _content;

  // Управление видимостью окна рисования
  bool _isDrawingVisible = false;

  @override
  void initState() {
    super.initState();
    _title = widget.note?.title ?? '';
    _content = widget.note?.content ?? '';
  }

  // Сохранение заметки
  void _saveNote() {
    if (_formKey.currentState!.validate()) {
      _formKey.currentState!.save();
      Note note = Note(title: _title, content: _content);
      Navigator.of(context).pop(note);
    }
  }

  // Метод для обработки завершения рисования
  Future<String> _handleDrawingDone(List<Offset?> points) async {
    // Преобразуем список точек в изображение
    final recorder = ui.PictureRecorder();
    final canvas = Canvas(recorder);
    final paint = Paint()
      ..color = Colors.black
      ..strokeWidth = 4.0
      ..strokeCap = StrokeCap.round;

    for (int i = 0; i < points.length - 1; i++) {
      if (points[i] != null && points[i + 1] != null) {
        canvas.drawLine(points[i]!, points[i + 1]!, paint);
      }
    }

    final picture = recorder.endRecording();
    final img = await picture.toImage(600, 300); // Увеличиваем размер для лучшей распознаваемости
    final byteData = await img.toByteData(format: ui.ImageByteFormat.png);
    final imageBytes = byteData!.buffer.asUint8List();

    // Отправка изображения на OCR API
    try {
      final response = await http.post(
        Uri.parse('https://api.ocr.space/parse/image'),
        headers: {
          'apikey': 'K82809161988957', //  API ключ
        },
        body: {
          'base64Image': base64Encode(imageBytes),
          'language': 'rus', // Укажите нужный язык, например, 'rus' для русского
        },
      );

      if (response.statusCode == 200) {
        final Map<String, dynamic> result = jsonDecode(response.body);
        if (result['IsErroredOnProcessing'] == false) {
          final parsedResults = result['ParsedResults'] as List<dynamic>;
          if (parsedResults.isNotEmpty) {
            return parsedResults[0]['ParsedText'] as String;
          }
        }
        return 'Не удалось распознать текст.';
      } else {
        return 'Ошибка при запросе к серверу.';
      }
    } catch (e) {
      print('Ошибка при распознавании текста: $e');
      return 'Произошла ошибка при распознавании текста.';
    }
  }

  // Метод для открытия окна рисования
  void _openDrawingCanvas() async {
    final recognizedText = await showModalBottomSheet<String>(
      context: context,
      isScrollControlled: true, // Позволяет модальному окну занимать нужную высоту
      builder: (context) => DrawingCanvas(onDrawingDone: _handleDrawingDone,
      ),
    );

    if (recognizedText != null && recognizedText.isNotEmpty) {
      setState(() {
        _content += '\n$recognizedText';
      });
      _saveNote();
    }
  }

  @override
  Widget build(BuildContext context) {
    bool isEditing = widget.note != null;

    return Scaffold(
      appBar: AppBar(
        title: Text(isEditing ? 'Редактировать заметку' : 'Новая заметка'),
        actions: [
          IconButton(
            icon: const Icon(Icons.save),
            onPressed: _saveNote,
            tooltip: 'Сохранить',
          ),
          IconButton(
            icon: const Icon(Icons.brush),
            onPressed: _openDrawingCanvas,
            tooltip: 'Рисовать',
          ),
        ],
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: Column(
            children: [
              // Поле для заголовка
              TextFormField(
                initialValue: _title,
                decoration: const InputDecoration(
                  labelText: 'Заголовок',
                  border: OutlineInputBorder(),
                ),
                validator: (value) {
                  if (value == null || value.trim().isEmpty) {
                    return 'Пожалуйста, введите заголовок';
                  }
                  return null;
                },
                onSaved: (value) {
                  _title = value!.trim();
                },
              ),
              const SizedBox(height: 16.0),
              // Поле для содержания
              Expanded(
                child: TextFormField(
                  initialValue: _content,
                  decoration: const InputDecoration(
                    labelText: 'Содержание',
                    border: OutlineInputBorder(),
                    alignLabelWithHint: true,
                  ),
                  maxLines: null,
                  keyboardType: TextInputType.multiline,
                  textAlignVertical: TextAlignVertical.top,
                  onSaved: (value) {
                    _content = value ?? '';
                  },
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}